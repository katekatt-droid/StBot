import logging
import json
import os
import qrcode
import io

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Telegram —Ç–æ–∫–µ–Ω
BOT_TOKEN = os.getenv("BOT_TOKEN")

# Google Sheets –∫–ª—é—á
SPREADSHEET_ID = os.getenv("GSHEET_KEY")

# –ü–æ–ª—É—á–∞–µ–º Google creds –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
creds_json = json.loads(os.getenv("GOOGLE_CREDS_JSON"))

scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_json, scope)
gc = gspread.authorize(credentials)

sheet = gc.open_by_key(SPREADSHEET_ID).worksheet("loyalty_users")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("üìà –ú–æ–π —É—Ä–æ–≤–µ–Ω—å"), KeyboardButton("üí∞ –ë–∞–ª–∞–Ω—Å"))
main_kb.add(KeyboardButton("üßæ –í–Ω–µ—Å—Ç–∏ –ø–æ–∫—É–ø–∫—É"))

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    user = sheet.findall(user_id)
    if not user:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sheet.append_row([
            user_id,
            message.from_user.first_name,
            "",
            "",
            "0", "–ù–æ–≤–∏—á–æ–∫", "3", "0", "", message.date.isoformat()
        ])
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ‚òïÔ∏è", reply_markup=main_kb)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR
        img = qrcode.make(user_id)
        buf = io.BytesIO()
        img.save(buf)
        buf.seek(0)
        await message.answer_photo(buf, caption="üì± –ü–æ–∫–∞–∂–∏ —ç—Ç–æ—Ç QR –±–∞—Ä–∏—Å—Ç–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")
    else:
        await message.answer("üëã –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!", reply_markup=main_kb)

@dp.message_handler(lambda msg: msg.text == "üìà –ú–æ–π —É—Ä–æ–≤–µ–Ω—å")
async def level(message: types.Message):
    user_id = str(message.from_user.id)
    users = sheet.col_values(1)
    if user_id in users:
        row = users.index(user_id) + 1
        data = sheet.row_values(row)
        await message.answer(f"‚òïÔ∏è –£—Ä–æ–≤–µ–Ω—å: *{data[5]}*\nüí∏ –°–∫–∏–¥–∫–∞: *{data[6]}%*\n–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: *{data[4]}‚ÇΩ*", parse_mode="Markdown")
    else:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start")

@dp.message_handler(lambda msg: msg.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance(message: types.Message):
    user_id = str(message.from_user.id)
    users = sheet.col_values(1)
    if user_id in users:
        row = users.index(user_id) + 1
        data = sheet.row_values(row)
        await message.answer(f"üíº –ë–∞–ª–∞–Ω—Å: {data[7]} –±–∞–ª–ª–æ–≤")
    else:
        await message.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start")

@dp.message_handler(lambda msg: msg.text == "üßæ –í–Ω–µ—Å—Ç–∏ –ø–æ–∫—É–ø–∫—É")
async def purchase(message: types.Message):
    await message.answer("üî¢ –í–≤–µ–¥–∏ —Å—É–º–º—É –ø–æ–∫—É–ø–∫–∏ (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):")
    @dp.message_handler(lambda m: m.text.isdigit())
    async def handle_amount(m: types.Message):
        amount = int(m.text)
        user_id = str(m.from_user.id)
        users = sheet.col_values(1)
        if user_id in users:
            row = users.index(user_id) + 1
            data = sheet.row_values(row)
            total = float(data[4]) + amount
            if total >= 14444:
                tier = "–¶–µ–Ω–∏—Ç–µ–ª—å"
                percent = 7
            elif total >= 7777:
                tier = "–õ—é–±–∏—Ç–µ–ª—å"
                percent = 5
            else:
                tier = "–ù–æ–≤–∏—á–æ–∫"
                percent = 3
            cashback = amount * percent / 100
            balance = float(data[7]) + cashback
            sheet.update(f"E{row}", str(total))
            sheet.update(f"F{row}", tier)
            sheet.update(f"G{row}", str(percent))
            sheet.update(f"H{row}", str(round(balance, 2)))
            await m.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ —É—á—Ç–µ–Ω–∞\nüí∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ: {round(cashback, 2)} –±–∞–ª–ª–æ–≤")
        else:
            await m.answer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ /start")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
